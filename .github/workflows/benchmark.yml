name: Benchmark
on:
  push:
    branches: [main]
  pull_request:
permissions:
  pull-requests: write
  contents: read

jobs:
  benchmark:
    if: github.event_name == 'push' || !contains(github.event.pull_request.labels.*.name, 'no benchmark')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up conda env
        uses: prefix-dev/setup-pixi@28eb668aafebd9dede9d97c4ba1cd9989a4d0004 # v0.9.2
      - name: Install repository
        run: pixi run postinstall
      - name: Cache models
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        env:
          cache-name: benchmark-model-cache
        with:
          path: examples/benchmark_models
          key: models-${{ hashFiles('examples/benchmark.py', '.github/workflows/benchmark.yml') }}
      - name: Run benchmark
        run: |
          python examples/benchmark.py
          echo "_(benchmark **${{ github.run_id }}** / attempt **${{ github.run_attempt }}**)_" >> result.md
          cat benchmark.md >> result.md
        shell: pixi run bash -e {0}
      - name: Comment on PR
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        if: github.event_name == 'pull_request'
        with:
          script: |
            fs = require('fs')

            const createOrUpdateComment = async (
              content,
            ) => {
              // Get all comments
              const comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              })

              // Check if any of the comments was posted by the bot and could be replaced
              for (const comment of comments.data) {
                if (comment.user?.login === 'github-actions[bot]') {
                  await github.rest.issues.updateComment({
                    comment_id: comment.id,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: content
                  })
                  return
                }
              }

              // If not, post a new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content,
              })
            }

            createOrUpdateComment(fs.readFileSync('result.md', 'utf8'))
      - name: Add benchmark to Job Summary
        run: cat benchmark.md >> "$GITHUB_STEP_SUMMARY"
